# ***** QUERY GENERAL ***** #
type Query { 

    # Cliente
    getClientes(limite: Int, offset: Int): [Cliente]    
    getCliente(id: ID) : Cliente  
    totalClientes: String  

    # Productos
    obtenerProductos(limite: Int, offset: Int, stock: Boolean): [Producto]
    obtenerProducto(id: ID!) : Producto
    totalProductos: String 

    # Pedidos
    obtenerPedidos(cliente: String): [Pedido]

    # Gráficas de Top de Clientes
    topClientes: [ClienteTotal]

    # Usuarios
    obtenerUsuario: Usuario

}

# ***** TYPE CLIENTE ***** #
type Cliente {
        id: ID
        nombre: String
        apellido: String
        empresa: String
        emails: [Email]
        #email: String
        edad: Int
        tipo: TipoCliente
    }
type Email {
    email: String
}

# *** TYPE PRODUCTO *** #
type Producto {
    id: ID
    nombre: String! 
    precio: Int!
    stock: Int!
}

# *** TYPE PEDIDO *** #
type Pedido {
    id: ID
    pedido: [PedidoProducto]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedido
}
type PedidoProducto {
    id: ID
    cantidad: Int
}

# *** TYPE GRÁFICA *** #
type ClienteTotal {
    total: Float
    cliente: [Cliente]
}

# *** TYPE USUARIO *** #
type Token {
    token: String!
}

type Usuario {
    usuario: String
}

# ***** M: INPUTS ***** #
""" Campos para los Clientes Nuevos """
input ClienteInput {
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    emails: [EmailInput] 
    #email: String
    edad: Int!
    tipo: TipoCliente!
    pedidos: [PedidoInput]
}
input EmailInput {
    email: String
}

# Asigna la categoría del Cliente #
enum TipoCliente {
    BASICO
    PREMIUM
}

""" Campos para los Productos Nuevos """
input ProductoInput {
    id: ID
    nombre: String!
    precio: Int!
    stock: Int!
}

""" Campos para los Pedidos Nuevos """
input PedidoInput {
    id: ID
    pedido: [PedidoProductoInput]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedido
}
input PedidoProductoInput {
    id: ID
    cantidad: Int
}
# Asigna el estado del Pedido #
enum EstadoPedido {
    PENDIENTE
    COMPLETADO
    CANCELADO 
}

#  ***** MUTATIONS ***** # 
""" Mutations: Clientes, Productos y Pedidos --> CUD(Create, Update and Delete) """
type Mutation {
    
    # *** Clientes *** #
    # Nombre del Resolver(MUTATION), Input con Datos(INPUT) y valor que retorna(TYPE)
    """ Te permite crear Nuevos Clientes """
    crearCliente(input: ClienteInput) : Cliente
    """ Te permite actualizar Clientes """
    actualizarCliente(input: ClienteInput) : Cliente 
    """ Te permite eliminar Clientes """
    eliminarCliente(id: ID!) : String 

    # *** Productos *** #
    # Nombre del Resolver(MUTATION), Input con Datos(INPUT) y valor que retorna(TYPE)
    """ Te permite crear Nuevos Productos """
    nuevoProducto(input: ProductoInput) : Producto 
    """ Te permite actualizar Productos """
    actualizarProducto(input: ProductoInput) : Producto
    """ Te permite eliminar Productos """
    eliminarProducto(id: ID!) : String 
    
    # *** Pedidos *** #
    # Nombre del Resolver(MUTATION), Input con Datos(INPUT) y valor que retorna(TYPE)
    """ Te permite crear Nuevos Pedidos """
    nuevoPedido(input: PedidoInput) : Pedido
    """ Te permite actualizar Pedidos """
    actualizarEstado(input: PedidoInput) : String
    """ Te permite eliminar Pedidos """
    eliminarPedido(id: ID!) : String 

    # *** Usuarios *** #
    # Nombre del Resolver(MUTATION), Input con Datos(INPUT) y valor que retorna(TYPE)
    """ Te permite crear Nuevos Usuarios """
    crearUsuario(usuario: String!, password: String!) : String
    """ Te permite autenticar el Usuario """
    # autenticarUsuario(usuario: String!, password: String!) : String
    autenticarUsuario(usuario: String!, password: String!) : Token

}  