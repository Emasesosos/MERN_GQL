# QUERY CLIENTE
type Cliente {
        id: ID
        nombre: String
        apellido: String
        empresa: String
        emails: [Email]
        #email: String
        edad: Int
        tipo: TipoCliente
        pedidos: [Pedido]
    }
type Email {
    email: String
}
type Pedido {
    producto: String
    precio: Int
}
""" Asigna la categor√≠a del Cliente """
enum TipoCliente {
    BASICO
    PREMIUM
}
type Query { 
    getClientes(limite: Int, offset: Int): [Cliente]    
    getCliente(id: ID) : Cliente  
    totalClientes: String  
}
# QUERY PRODUCTO
type Producto {
    id: ID
    nombre: String! 
    precio: Int!
    stock: Int!
}
# MUTATION 
    input EmailInput {
        email: String
    }
    input PedidoInput {
        producto: String
        precio: Int
    }
    """ Campos para los Clientes Nuevos """
    input ClienteInput {
        id: ID
        nombre: String!
        apellido: String!
        empresa: String!
        emails: [EmailInput] 
        #email: String
        edad: Int!
        tipo: TipoCliente!
        pedidos: [PedidoInput]
    }
    """ Campos para los Productos Nuevos """
    input ProductoInput {
        id: ID
        nombre: String!
        precio: Int!
        stock: Int!
    }
    """ Mutations para crear nuevos Clientes """
    type Mutation {
        # Nombre del Resolver, Input con Datos y valor que retorna
        """ Te permite crear Nuevos Clientes """
        crearCliente(input: ClienteInput) : Cliente
        """ Te permite actualizar Clientes """
        actualizarCliente(input: ClienteInput) : Cliente 
        """ Te permite eliminar Clientes """
        eliminarCliente(id: ID!) : String 
        # Productos
        nuevoProducto(input: ProductoInput) : Producto
    } 